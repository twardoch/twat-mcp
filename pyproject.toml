# this_file: pyproject.toml
[project]
name = "twat-mcp"
dynamic = ["version"]
description = "A Multi-User Dungeon, Multi-User Shared Hallucination, or Multi-User Shared Environment (MUD/MUSH/MUSE) plugin for twat."
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = ["mud", "mush", "muse", "mcp", "twat"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Communications :: Chat",
    "Topic :: Games/Entertainment :: Multi-User Dungeons (MUD)",
]

dependencies = [
    "twat",
]


[project.optional-dependencies]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]
dev = [
    # "twat-mcp[test]", # No longer needed, directly list test deps
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.6.0",
    "ruff>=0.1.0", # Includes formatter and linter
    "mypy>=1.0.0",
    "pyupgrade>=3.19.0", # For upgrading syntax
    "build>=0.10.0", # For building packages
    "uv>=0.1.0", # For faster environment and package management
]


[project.scripts]
# mcp-cli = "twat_mcp.cli:main" # Example if a CLI script is added later

[project.entry-points."twat.plugins"]
mcp = "twat_mcp:TwatMcpPlugin" # Assuming a plugin class `TwatMcpPlugin` will be defined


[[project.authors]]
name = "Adam Twardoch"
email = "adam+github@twardoch.com"

[project.urls]
Homepage = "https://github.com/twardoch/twat-mcp"
Documentation = "https://github.com/twardoch/twat-mcp#readme"
Issues = "https://github.com/twardoch/twat-mcp/issues"
Source = "https://github.com/twardoch/twat-mcp"
Changelog = "https://github.com/twardoch/twat-mcp/blob/main/CHANGELOG.md" # Assuming a changelog will be added


[build-system]
build-backend = "hatchling.build"
requires = [
    "hatchling>=1.21.0",
    "hatch-vcs>=0.3.0"
]


[tool.hatch.version]
source = "vcs"
path = "src/twat_mcp/__version__.py" # Write version to this file

[tool.hatch.version.raw-options]
version_scheme = "post-release" # e.g. 1.0.0.post1 for dev commits
# local_scheme = "node-and-date" # Optional: for more detailed local versions


# [tool.hatch.build.hooks.vcs] # Ensure this table is fully removed if not needed
# # This section is now handled by tool.hatch.version path
# # version-file = "src/twat_mcp/__version__.py"


#[tool.hatch.build.targets.wheel.hooks.custom]
## Example: can be used if custom build steps are needed
#path = "hatch_hooks.py" # A custom hooks file if you need one


[tool.hatch.build.targets.wheel]
packages = ["src/twat_mcp"]


[tool.hatch.envs.default]
python = "3.10" # Specify a default python for `hatch shell`
features = ["dev"] # Install the project with 'dev' extras
dependencies = [
    "uv" # uv is useful within the environment itself
]
# scripts = { check = "lint:all" } # Default script for `hatch run` <-- This was the duplicate

# Matrix for testing across Python versions
[[tool.hatch.envs.default.matrix]]
python = ["3.10", "3.11", "3.12"]


[tool.hatch.envs.default.scripts]
check = "lint:all" # Default script for `hatch run`
# General development tasks
install-dev = "uv pip install -e .[dev]"
# Testing
test = "uv run pytest {args:tests}"
test-cov = "uv run pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/twat_mcp --cov=tests {args:tests}"
# Linting and Formatting
lint = "uv run ruff check src/twat_mcp tests && uv run ruff format --check --respect-gitignore src/twat_mcp tests"
format = "uv run ruff format --respect-gitignore src/twat_mcp tests && uv run ruff check --fix --unsafe-fixes src/twat_mcp tests"
# Type Checking
type-check = "uv run mypy src/twat_mcp tests"
# Combined checks
lint-all = ["format", "type-check", "test-cov"]
# Building
build = "python -m build" # Hatch will use the env's python

# Specific environment for linting if more complex setup is needed
[tool.hatch.envs.lint]
detached = true # Doesn't install the project itself
dependencies = ["ruff>=0.1.0", "mypy>=1.0.0", "uv>=0.1.0"]

[tool.hatch.envs.lint.scripts]
typing = "uv run mypy --install-types --non-interactive {args:src/twat_mcp tests}"
style = ["uv run ruff check {args:.}", "uv run ruff format --check --respect-gitignore {args:.}"]
fmt = ["uv run ruff format --respect-gitignore {args:.}", "uv run ruff check --fix {args:.}"]
all = ["style", "typing"]


[tool.hatch.envs.docs]
dependencies = ["sphinx", "sphinx-rtd-theme"] # Example if using Sphinx
scripts = { build = "sphinx-build docs docs/_build", serve = "sphinx-autobuild docs docs/_build" }


[tool.ruff]
target-version = "py310"
line-length = 88
fix = true # Enable auto-fixing by default where possible
extend-exclude = ["docs/*"] # Exclude docs from ruff if they have different formatting

[tool.ruff.lint]
# For available rules, see: https://docs.astral.sh/ruff/rules/
# For rule sets, see: https://docs.astral.sh/ruff/faq/#what-is-the-all-lint-rule
select = [
    "A",    # flake8-builtins
    "ARG",  # flake8-unused-arguments
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "C90",  # mccabe complexity
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "EM",   # flake8-errmsg
    "F",    # pyflakes
    "FBT",  # flake8-boolean-trap
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "N",    # pep8-naming
    "PLC",  # Pylint Convention
    "PLE",  # Pylint Error
    "PLR",  # Pylint Refactor
    "PLW",  # Pylint Warning
    "Q",    # flake8-quotes
    "RUF",  # Ruff-specific rules
    "S",    # flake8-bandit (security)
    "T20",  # flake8-print
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "YTT",  # flake8-2020
]
ignore = [
    "ARG001", # Unused function argument (often common in interfaces)
    "ARG002", # Unused method argument (often common in interfaces)
    "E501",   # Line too long (handled by formatter)
    "I001",   # isort found an import in the wrong position (often auto-fixed)
    "RUF001", # String contains ambiguous unicode character (useful but can be noisy)
    "RUF005", # Consider `subprocess.run(..., check=True)`
    "PLR2004",# Magic value used in comparison (can be noisy)
    "EXE003", # Shebang is present but file is not executable
    "ISC001", # Implicitly concatenated string on one line
    "S101",   # Use of assert (fine for tests)
    "C901",   # Function is too complex
    "PLR0913",# Too many arguments to function call
]
# Allow autofix for all enabled rules (when --fix)
fixable = ["ALL"]
unfixable = []


[tool.ruff.format]
quote-style = "double" # Prefer double quotes
indent-style = "space" # Use spaces for indentation
skip-magic-trailing-comma = false # Add trailing commas where possible
line-ending = "lf" # Enforce Unix-style line endings

[tool.ruff.lint.isort]
known-first-party = ["twat_mcp"] # Define your project as first-party
# force-sort-within-sections = true # Optional: sort imports within sections

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "ARG001", "FBT001", "FBT002", "PLR2004"]
"src/twat_mcp/__init__.py" = ["F401"] # Allow unused import for __version__
"hatch_hooks.py" = ["INP001"] # Allow implicit namespace package if hatch_hooks.py is at root


[tool.mypy]
# For config options, see: https://mypy.readthedocs.io/en/stable/config_file.html
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true         # Disallow functions without type hints
disallow_incomplete_defs = true      # Disallow partially annotated functions
check_untyped_defs = true            # Type check even unannotated functions (best effort)
disallow_untyped_decorators = true   # Decorators must be typed
no_implicit_optional = true          # Arguments cannot be Optional by default
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true                # Warn if a function declared to return a value does not
warn_unreachable = true              # Warn about unreachable code
strict_equality = true               # More strict checking for equality comparisons
# Enable plugins if needed, e.g., for Pydantic or Django
# plugins = pydantic.mypy

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true # Be more lenient in tests if necessary

[[tool.mypy.overrides]]
module = "twat.*" # Assuming 'twat' is an external library that might not have perfect stubs
ignore_missing_imports = true


[tool.coverage.paths] # For combining coverage from different paths (e.g., in tox/nox)
source = [
    "src/twat_mcp",
    "*/twat-mcp/src/twat_mcp" # For editable installs in some setups
]
tests = [
    "tests",
    "*/twat-mcp/tests"
]

[tool.coverage.run]
source_pkgs = ["twat_mcp", "tests"]
branch = true # Measure branch coverage
parallel = true # Enable parallel mode for pytest-cov
omit = [
    "src/twat_mcp/__version__.py", # Version file is auto-generated
    "src/twat_mcp/__main__.py", # If you have a CLI entry point via __main__
    "tests/*", # Usually test files are not included in source coverage
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover", # Standard pragma
    "if __name__ == .__main__.:", # Standard boilerplate
    "if TYPE_CHECKING:", # Type checking blocks
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
    "class .*\\bProtocol\\):",
    "\\.\\.\\.", # Ellipsis for stubs
]
fail_under = 80 # Example: enforce minimum coverage


[tool.pytest.ini_options]
# For options, see: https://docs.pytest.org/en/stable/reference/reference.html#ini-options-ref
minversion = "7.0"
addopts = "-ra -q -v --durations=10 -p no:briefcase --color=yes" # -ra: show extra test summary info, -q: quiet
asyncio_mode = "auto"
console_output_style = "progress" # Or "count"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    # "error:::.*", # Turn other warnings into errors if desired
]
log_cli = true
log_cli_level = "INFO"
markers = [
  "benchmark: marks tests as benchmarks (select with '-m benchmark')",
  "unit: mark a test as a unit test",
  "integration: mark a test as an integration test",
  "smoke: mark a test as a smoke test",
]
norecursedirs = [
  ".*", ".*env", "build", "dist", "docs", "htmlcov", "node_modules", "venv", "__pycache__", "*.egg-info", "_private",
]
python_classes = ["Test*", "*Tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
testpaths = ["tests"] # Directory where tests are located
# pythonpath = ["src", "."] # Try removing this, Hatch should handle it.


[tool.pytest-benchmark]
min_rounds = 100
min_time = 0.1
histogram = true
storage = "file" # Store benchmark data in .benchmarks/
save_data = true # Save data from benchmarks
compare = [
    "min", "max", "mean", "stddev", "median", "iqr", "ops", "rounds",
]
# Example: fail if current run is 2x slower than previous
# fail = ["mean:2"]

[tool.pyright] # For VSCode Pylance users, complements MyPy
include = ["src", "tests"]
exclude = ["**/node_modules", "**/__pycache__", "src/experimental", "typings"]
# typeCheckingMode = "strict" # or "basic"
# pythonVersion = "3.10"
# pythonPlatform = "Linux"
# reportMissingImports = true
# reportMissingTypeStubs = false # Often too noisy for external libs
# useLibraryCodeForTypes = true

[tool.codespell]
skip = "*.pyc,*.egg,*.png,*.gif,*.jpg,*.svg,*.ico,*.lock,poetry.lock,pyproject.toml.lock,*.txt,*.json,*.css,*.js,*.map,*.html"
ignore-words-list = "ba,hist,nd,ın" # Add words to ignore
# check-filenames = true
# check-hidden = true
